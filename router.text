package util

import org.scalajs.dom.raw.HashChangeEvent
import outwatch.dom._
import rxscalajs.{ Observable, Observer }
import org.scalajs.dom
import scala.scalajs.js.{ Date, JSApp }
import scala.util.Try

trait Page {
  def title: String
  def node(hash: String): Observable[VNode]
}

case class FlatPage(title: String, node: VNode)

trait RoutedApp extends JSApp {

  def pagesList: Seq[Page]
  def defaultHash: String

  private def flatForHash(hash: String) = {
    def step(rest: Seq[Page]): Observable[FlatPage] =
      if (rest.isEmpty) sys.error(s"page not found for hash $hash") else {
        val obs = rest.head.node(hash)
        for {
          isEmpty <- obs.isEmpty
          result <- {
            if (isEmpty) step(rest.tail) // recursion
            else obs.map { node => FlatPage(title = rest.head.title, node = node) }
          }
        } yield result
      }

    step(pagesList)
  }

  private def extractHash(s: String) = {
    val idx = s.indexOf("#")
    if (idx >= 0) s.substring(idx + 1) else ""
  }

  private def firstHash = {
    val inWindow = extractHash(dom.window.location.hash)
    if (inWindow.isEmpty) {
      dom.window.location.hash = defaultHash // side effect
      defaultHash
    } else inWindow
  }

  def main(): Unit = {

    val hashes = Observable.create { observer: Observer[String] =>
      dom.window.onhashchange = { e =>
        val url = e.newURL
        observer.next(extractHash(url))
      }
    }.startWith(firstHash)

    val nodes = for {
      hash <- hashes
      flat <- flatForHash(hash)
    } yield {
      dom.window.document.title = flat.title // side effect
      flat.node
    }

    val root = div(child <-- nodes)
    OutWatch.render("#app", root)
  }
}

object RoutedTest extends RoutedApp with JSApp {

  object Page1 extends Page {
    val defaultNode = div(
      div("page 1"),
      div(a(href := "#item/777", "go to item 777")),
      div((new Date).toString) // on page switching a state is kept!!
    )
    def node(hash: String) =
      if (hash == "page1") Observable.just(defaultNode) else Observable.empty
    def title = "page 1"
  }

  object Page2 extends Page {
    def title = "the second page"

    private val route = """item/(\d+)""".r

    def node(hash: String) = Try {
      hash match {
        case route(itemId) =>
          Observable.just(div(s"page 2 with item ${itemId.toLong}: Long"))
      }
    }.getOrElse(Observable.empty)
  }

  val pagesList = Seq(Page1, Page2)
  val defaultHash = "page1"

}
